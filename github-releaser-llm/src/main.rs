use clap::Parser;
use reqwest::Client;
use std::env;
use std::error::Error;
use dotenv;

mod github_client;
mod openai_client;

use github_client::GitHubClient;
use openai_client::OpenAIClient;

#[derive(Parser)]
struct Cli {
    /// Release tag (e.g. v1.2.3)
    #[arg(short, long)]
    tag: String,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {

    dotenv::dotenv().ok();
    let github_token = env::var("GITHUB_TOKEN").expect("GITHUB_TOKEN is missing.");
    let openai_api_key = env::var("OPENAI_API_KEY").expect("OPENAI_API_KEY is missing.");

    let args = Cli::parse();
    let tag = args.tag;
    let http_client = Client::new();

    let gh_client = GitHubClient::new(http_client.clone(), github_token);

    // 1. Delete existing GitHub release (if exists).
    if let Some(release) = gh_client.get_release_by_tag(&tag).await? {
        gh_client.delete_release(release.id).await?;
    } else {
        println!("No existing release for tag {} found.", tag);
    }

    // 2. Delete the Git tag (remote ref).
    gh_client.delete_tag(&tag).await?;

    // 3. Retrieve the latest commit SHA from the release branch.
    let branch = format!("release/{}", tag);
    let commit_sha = gh_client.get_latest_commit_sha(&branch).await?;
    println!("Latest commit on branch {}: {}", branch, commit_sha);

    // 4. Create an annotated tag object and then its reference.
    let tag_message = format!("Release {}", tag);
    let tag_object_sha = gh_client.create_tag_object(&tag, &tag_message, &commit_sha).await?;
    gh_client.create_tag_ref(&tag, &tag_object_sha).await?;

    // 5. Create a new GitHub release with autogenerated release notes.
    let release = gh_client.create_release(&tag).await?;

    // 6. Retrieve the autogenerated release notes from the created release.
    let auto_notes = release.body.ok_or("No autogenerated release notes found.")?;
    println!("Auto-generated Release Notes:\n{}", auto_notes);

    // 7. Send the autogenerated notes to OpenAI for formatting.
    let openai_client = OpenAIClient::new(http_client, openai_api_key, "gpt-4o");

    let formatted_notes = openai_client.format_release_notes(&auto_notes).await?;
    println!("Formatted Release Notes:\n{}", formatted_notes);

    // 8. Update the GitHub release with the formatted release notes.
    gh_client.update_release(release.id, &formatted_notes).await?;

    println!("Release update process for '{}' completed successfully.", tag);
    Ok(())
}
